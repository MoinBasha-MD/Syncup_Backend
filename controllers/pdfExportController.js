const PDFDocument = require('pdfkit');
const User = require('../models/userModel');
const Message = require('../models/Message');
const Post = require('../models/postModel');
const Story = require('../models/storyModel');

/**
 * Export analytics report as PDF
 */
const exportAnalyticsPDF = async (req, res) => {
  try {
    const days = parseInt(req.query.days) || 30;
    const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
    
    // Gather data
    const [
      totalUsers,
      totalMessages,
      totalPosts,
      totalStories,
      newUsers,
      newMessages
    ] = await Promise.all([
      User.countDocuments(),
      Message.countDocuments(),
      Post.countDocuments(),
      Story.countDocuments(),
      User.countDocuments({ createdAt: { $gte: startDate } }),
      Message.countDocuments({ createdAt: { $gte: startDate } })
    ]);
    
    // Create PDF
    const doc = new PDFDocument({ margin: 50 });
    
    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=analytics-report-${Date.now()}.pdf`);
    
    // Pipe PDF to response
    doc.pipe(res);
    
    // Add content
    doc.fontSize(24).text('Sync-Up Analytics Report', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Generated: ${new Date().toLocaleString()}`, { align: 'center' });
    doc.fontSize(12).text(`Report Period: Last ${days} days`, { align: 'center' });
    doc.moveDown(2);
    
    // Summary Section
    doc.fontSize(18).text('Summary Statistics', { underline: true });
    doc.moveDown();
    
    doc.fontSize(12);
    doc.text(`Total Users: ${totalUsers}`);
    doc.text(`Total Messages: ${totalMessages}`);
    doc.text(`Total Posts: ${totalPosts}`);
    doc.text(`Total Stories: ${totalStories}`);
    doc.moveDown();
    
    doc.text(`New Users (${days}d): ${newUsers}`);
    doc.text(`New Messages (${days}d): ${newMessages}`);
    doc.moveDown(2);
    
    // Growth Section
    doc.fontSize(18).text('Growth Metrics', { underline: true });
    doc.moveDown();
    
    const userGrowthRate = totalUsers > 0 ? ((newUsers / totalUsers) * 100).toFixed(2) : 0;
    const messageGrowthRate = totalMessages > 0 ? ((newMessages / totalMessages) * 100).toFixed(2) : 0;
    
    doc.fontSize(12);
    doc.text(`User Growth Rate: ${userGrowthRate}%`);
    doc.text(`Message Growth Rate: ${messageGrowthRate}%`);
    doc.moveDown(2);
    
    // Engagement Section
    doc.fontSize(18).text('Engagement Metrics', { underline: true });
    doc.moveDown();
    
    const avgMessagesPerUser = totalUsers > 0 ? (totalMessages / totalUsers).toFixed(2) : 0;
    const avgPostsPerUser = totalUsers > 0 ? (totalPosts / totalUsers).toFixed(2) : 0;
    
    doc.fontSize(12);
    doc.text(`Average Messages per User: ${avgMessagesPerUser}`);
    doc.text(`Average Posts per User: ${avgPostsPerUser}`);
    doc.moveDown(2);
    
    // Footer
    doc.fontSize(10).text('Generated by Sync-Up Admin Panel', { align: 'center' });
    doc.text('Â© 2025 Sync-Up. All rights reserved.', { align: 'center' });
    
    // Finalize PDF
    doc.end();
    
  } catch (error) {
    console.error('PDF export error:', error);
    res.status(500).send('Error generating PDF');
  }
};

/**
 * Mask sensitive data
 */
const maskEmail = (email) => {
  if (!email) return 'N/A';
  const parts = email.split('@');
  return parts[0].substring(0, 2) + '***@' + parts[1];
};

const maskPhone = (phone) => {
  if (!phone) return 'N/A';
  return phone.substring(0, 4) + '****' + phone.substring(phone.length - 2);
};

/**
 * Export user list as PDF
 */
const exportUsersPDF = async (req, res) => {
  try {
    const users = await User.find()
      .sort({ createdAt: -1 })
      .limit(100)
      .select('name email phoneNumber isActive createdAt')
      .lean();
    
    // Create PDF
    const doc = new PDFDocument({ margin: 50, size: 'A4', layout: 'landscape' });
    
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=users-list-${Date.now()}.pdf`);
    
    doc.pipe(res);
    
    // Title
    doc.fontSize(20).text('Users List (Privacy Protected)', { align: 'center' });
    doc.moveDown();
    doc.fontSize(10).text(`Generated: ${new Date().toLocaleString()}`, { align: 'center' });
    doc.fontSize(9).text('Note: Sensitive data is masked for privacy protection', { align: 'center', color: 'red' });
    doc.moveDown(2);
    
    // Table Header
    doc.fontSize(10).font('Helvetica-Bold');
    const startY = doc.y;
    doc.text('Name', 50, startY, { width: 150 });
    doc.text('Email (Masked)', 200, startY, { width: 200 });
    doc.text('Phone (Masked)', 400, startY, { width: 120 });
    doc.text('Status', 520, startY, { width: 80 });
    doc.text('Joined', 600, startY, { width: 150 });
    
    doc.moveTo(50, doc.y + 5).lineTo(750, doc.y + 5).stroke();
    doc.moveDown();
    
    // Table Rows
    doc.font('Helvetica');
    users.forEach((user, index) => {
      const y = doc.y;
      
      if (y > 500) {
        doc.addPage();
        doc.y = 50;
      }
      
      doc.fontSize(9);
      doc.text(user.name || 'N/A', 50, doc.y, { width: 150 });
      doc.text(maskEmail(user.email), 200, y, { width: 200 });
      doc.text(maskPhone(user.phoneNumber), 400, y, { width: 120 });
      doc.text(user.isActive ? 'Active' : 'Inactive', 520, y, { width: 80 });
      doc.text(new Date(user.createdAt).toLocaleDateString(), 600, y, { width: 150 });
      
      doc.moveDown(0.5);
    });
    
    // Footer with privacy notice
    doc.fontSize(8).fillColor('gray');
    doc.text('Privacy Notice: This document contains masked personal data. Full data access requires proper authorization.', 50, doc.page.height - 50, {
      align: 'center',
      width: doc.page.width - 100
    });
    
    doc.end();
    
  } catch (error) {
    console.error('Users PDF export error:', error);
    res.status(500).send('Error generating PDF');
  }
};

module.exports = {
  exportAnalyticsPDF,
  exportUsersPDF
};
